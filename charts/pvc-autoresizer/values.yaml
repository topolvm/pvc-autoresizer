image:
  # image.repository -- pvc-autoresizer image repository to use.
  repository: ghcr.io/topolvm/pvc-autoresizer

  # image.tag -- pvc-autoresizer image tag to use.
  # @default -- `{{ .Chart.AppVersion }}`
  tag:  # 0.6.1

  # image.pullPolicy -- pvc-autoresizer image pullPolicy.
  pullPolicy:  # Always

controller:
  # controller.replicas -- Specify the number of replicas of the controller Pod.
  replicas: 1

  args:
    # controller.args.prometheusURL -- Specify Prometheus URL to query volume stats.
    # Used as "--prometheus-url" option
    prometheusURL: http://prometheus-prometheus-oper-prometheus.prometheus.svc:9090

    # controller.args.namespaces -- Specify namespaces to control the pvcs of. Empty for all namespaces.
    # Used as "--namespaces" option
    namespaces: []

    # controller.args.interval -- Specify interval to monitor pvc capacity.
    # Used as "--interval" option
    interval: 10s

    # controller.args.additionalArgs -- Specify additional args.
    additionalArgs: []

  # controller.resources -- Specify resources.
  resources:
    requests:
      cpu: 100m
      memory: 20Mi

  # controller.podAnnotations -- Annotations to be added to controller pods.
  podAnnotations: {}

  # controller.terminationGracePeriodSeconds -- Specify terminationGracePeriodSeconds.
  terminationGracePeriodSeconds:  # 10

  # controller.tolerations -- Ensure pods are not scheduled on inappropriate nodes.
  tolerations: {}

  # controller.nodeSelector -- Map of key-value pairs for scheduling pods on specific nodes.
  nodeSelector: {}

# -- deploy a PodMonitor. This is not tested in CI so make sure to test it yourself.
podMonitor:
  # podMonitor.enabled -- If true, creates a Prometheus Operator PodMonitor.
  enabled: false
  # podMonitor.scheme -- Scheme to use for scraping.
  scheme: http
  # podMonitor.interval -- Interval that Prometheus scrapes metrics.
  interval: ""
  # podMonitor.scrapeTimeout -- The timeout after which the scrape is ended
  scrapeTimeout: ""
  # podMonitor.namespace -- Namespace which Prometheus is running in.
  namespace: ""
  # podMonitor.relabelings -- RelabelConfigs to apply to samples before scraping.
  relabelings: []
  # - sourceLabels: [__meta_kubernetes_service_label_cluster]
  #   targetLabel: cluster
  #   regex: (.*)
  #   replacement: ${1}
  #   action: replace

  # podMonitor.metricRelabelings -- MetricRelabelConfigs to apply to samples before ingestion.
  metricRelabelings: []
  # - sourceLabels: [__meta_kubernetes_service_label_cluster]
  #   targetLabel: cluster
  #   regex: (.*)
  #   replacement: ${1}
  #   action: replace

  # podMonitor.additionalLabels -- Additional labels that can be used so PodMonitor will be discovered by Prometheus.
  additionalLabels: {}
